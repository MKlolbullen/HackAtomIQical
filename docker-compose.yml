version: '3.8'

services:
  # HackAtomIQ Frontend (Development)
  hackatomiq-frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "5173:5173"
    volumes:
      - ./bug-bounty-platform:/app
      - /app/node_modules
    environment:
      - VITE_API_URL=http://localhost:5000
      - VITE_APP_NAME=HackAtomIQ
    profiles:
      - development
    networks:
      - hackatomiq-network

  # HackAtomIQ Backend
  hackatomiq-backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    volumes:
      - ./bug-bounty-backend/src:/app/src
      - hackatomiq-data:/app/src/database
    environment:
      - FLASK_ENV=development
      - SECRET_KEY=hackatomiq-secret-key-2024
      - DATABASE_URL=sqlite:///hackatomiq.db
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
      - postgres
    networks:
      - hackatomiq-network
    profiles:
      - development
      - production

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - hackatomiq-network
    profiles:
      - development
      - production

  # PostgreSQL for production database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=hackatomiq
      - POSTGRES_USER=hackatomiq
      - POSTGRES_PASSWORD=hackatomiq-db-password
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - hackatomiq-network
    profiles:
      - production

  # Nginx reverse proxy (Production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - hackatomiq-backend
    networks:
      - hackatomiq-network
    profiles:
      - production

  # Celery worker for background tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A src.main.celery worker --loglevel=info
    volumes:
      - ./bug-bounty-backend/src:/app/src
    environment:
      - FLASK_ENV=production
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://hackatomiq:hackatomiq-db-password@postgres:5432/hackatomiq
    depends_on:
      - redis
      - postgres
    networks:
      - hackatomiq-network
    profiles:
      - production

  # Celery beat scheduler
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A src.main.celery beat --loglevel=info
    volumes:
      - ./bug-bounty-backend/src:/app/src
    environment:
      - FLASK_ENV=production
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://hackatomiq:hackatomiq-db-password@postgres:5432/hackatomiq
    depends_on:
      - redis
      - postgres
    networks:
      - hackatomiq-network
    profiles:
      - production

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - hackatomiq-network
    profiles:
      - monitoring

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=hackatomiq-grafana
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - hackatomiq-network
    profiles:
      - monitoring

  # Elasticsearch for log aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - hackatomiq-network
    profiles:
      - monitoring

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - hackatomiq-network
    profiles:
      - monitoring

  # Logstash for log processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    ports:
      - "5044:5044"
    volumes:
      - ./docker/logstash/pipeline:/usr/share/logstash/pipeline
    environment:
      - "LS_JAVA_OPTS=-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch
    networks:
      - hackatomiq-network
    profiles:
      - monitoring

networks:
  hackatomiq-network:
    driver: bridge

volumes:
  hackatomiq-data:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:
  elasticsearch-data:

